# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Users {
  id: ID!
  profileid: String
  profile: String
  history: String
  createdAt: DateTime
  updatedAt: DateTime
  accessToken: String
  refreshToken: String
  email: String
  password: String
  deleteToken: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type LoginResponse {
  access_token: String!
  user: Users!
}

type Notes {
  id: ID!
  ownerId: String
  content: String
  title: String
  createdAt: DateTime
  updatedAt: DateTime
  shortid: String!
  permission: enum_Notes_permission
  viewcount: Int
  lastchangeuserId: String
  lastchangeAt: DateTime
  alias: String
  savedAt: DateTime
  authorship: String
  deletedAt: DateTime
}

enum enum_Notes_permission {
  freely
  editable
  limited
  locked
  protected
  private
}

type Query {
  user(where: UsersWhereInput, orderBy: [UsersOrderByWithRelationInput!], cursor: UsersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum!]): Users!
  users(where: UsersWhereInput, orderBy: [UsersOrderByWithRelationInput!], cursor: UsersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum!]): [Users!]!
  note(where: NotesWhereInput, orderBy: [NotesOrderByWithRelationInput!], cursor: NotesWhereUniqueInput, take: Int, skip: Int, distinct: [NotesScalarFieldEnum!]): Notes!
  notes(where: NotesWhereInput, orderBy: [NotesOrderByWithRelationInput!], cursor: NotesWhereUniqueInput, take: Int, skip: Int, distinct: [NotesScalarFieldEnum!]): [Notes!]!
}

input UsersWhereInput {
  AND: [UsersWhereInput!]
  OR: [UsersWhereInput!]
  NOT: [UsersWhereInput!]
  id: UuidFilter
  profileid: StringNullableFilter
  profile: StringNullableFilter
  history: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  accessToken: StringNullableFilter
  refreshToken: StringNullableFilter
  email: StringNullableFilter
  password: StringNullableFilter
  deleteToken: UuidNullableFilter
}

input UuidFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  mode: QueryMode
  not: NestedUuidFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedUuidFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedUuidFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input UuidNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  mode: QueryMode
  not: NestedUuidNullableFilter
}

input NestedUuidNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedUuidNullableFilter
}

input UsersOrderByWithRelationInput {
  id: SortOrder
  profileid: SortOrder
  profile: SortOrder
  history: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  accessToken: SortOrder
  refreshToken: SortOrder
  email: SortOrder
  password: SortOrder
  deleteToken: SortOrder
}

enum SortOrder {
  asc
  desc
}

input UsersWhereUniqueInput {
  id: String
  profileid: String
  email: String
}

enum UsersScalarFieldEnum {
  id
  profileid
  profile
  history
  createdAt
  updatedAt
  accessToken
  refreshToken
  email
  password
  deleteToken
}

input NotesWhereInput {
  AND: [NotesWhereInput!]
  OR: [NotesWhereInput!]
  NOT: [NotesWhereInput!]
  id: UuidFilter
  ownerId: UuidNullableFilter
  content: StringNullableFilter
  title: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  shortid: StringFilter
  permission: Enumenum_Notes_permissionNullableFilter
  viewcount: IntNullableFilter
  lastchangeuserId: UuidNullableFilter
  lastchangeAt: DateTimeNullableFilter
  alias: StringNullableFilter
  savedAt: DateTimeNullableFilter
  authorship: StringNullableFilter
  deletedAt: DateTimeNullableFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input Enumenum_Notes_permissionNullableFilter {
  equals: enum_Notes_permission
  in: [enum_Notes_permission!]
  notIn: [enum_Notes_permission!]
  not: NestedEnumenum_Notes_permissionNullableFilter
}

input NestedEnumenum_Notes_permissionNullableFilter {
  equals: enum_Notes_permission
  in: [enum_Notes_permission!]
  notIn: [enum_Notes_permission!]
  not: NestedEnumenum_Notes_permissionNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NotesOrderByWithRelationInput {
  id: SortOrder
  ownerId: SortOrder
  content: SortOrder
  title: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  shortid: SortOrder
  permission: SortOrder
  viewcount: SortOrder
  lastchangeuserId: SortOrder
  lastchangeAt: SortOrder
  alias: SortOrder
  savedAt: SortOrder
  authorship: SortOrder
  deletedAt: SortOrder
}

input NotesWhereUniqueInput {
  id: String
  title: String
}

enum NotesScalarFieldEnum {
  id
  ownerId
  content
  title
  createdAt
  updatedAt
  shortid
  permission
  viewcount
  lastchangeuserId
  lastchangeAt
  alias
  savedAt
  authorship
  deletedAt
}

type Mutation {
  login(loginUserInput: LoginUserInput!): LoginResponse!
  deleteNote(where: NotesWhereUniqueInput!): Notes!
}

input LoginUserInput {
  email: String!
  password: String!
}